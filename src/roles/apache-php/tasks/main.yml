---
- name: Install apache packages
  yum: name={{item}} state=installed
  with_items:
    - httpd-devel
    - mod_ssl
    - mod_proxy_html

- name: Make apache own htdocs directory
  file:
    state: directory
    path: "{{ m_htdocs }}"
    owner: apache
    group: apache
    mode: 0775

- name: Ensure user meza-ansible and alt-meza-ansible in group "apache"
  user:
    name: "{{ item }}"
    # add onto groups
    groups: apache
    append: yes
  with_items:
  - meza-ansible
  - alt-meza-ansible

- name: write the apache config file
  template: "src=httpd.conf.j2 dest={{ m_apache_conf }}"
  notify:
  - restart apache

- name: HTTPS Always with unmanaged load balancer
  blockinfile:
    path: "{{ m_apache_conf }}"
    block: |
      # redirect traffic on port 80 to SSL if local HAproxy is unused
      Listen 80
      <VirtualHost *:80>
             <IfModule mod_rewrite.c>
                 # Enable mod_rewrite engine
                 RewriteEngine on
                 # This is needed if NOT using HAproxy, but offloading to an unmanaged load balancer
                 # and you still want all traffic to go through HTTPS
                 RewriteCond %{HTTP:X-Forwarded-Proto} ^http$
                 RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
             </IfModule>
      </VirtualHost>
    state: present
  when: "'load-balancers-unmanaged' in groups and {{ m_https_always }} "
  notify:
    - restart apache

- name: Install PHP
  include: php.yml
  # http://docs.ansible.com/ansible/playbooks_roles.html#dynamic-versus-static-includes
  static: yes

- name: Ensure Composer configured
  include_role:
    name: composer

- name: Ensure PHP profiling configured
  include: profiling.yml
  # http://docs.ansible.com/ansible/playbooks_roles.html#dynamic-versus-static-includes
  static: yes
  when: m_setup_php_profiling

# If profiling not enabled, disable MongoDB if it exists (e.g. profiling had
# previously been enabled)
- name: Check if MongoDB service exists
  stat: path=/etc/init.d/mongod
  register: mongo_service_status
- name: Stop MongoDB service if profiling is disabled
  service:
    name: mongod
    state: stopped
  when: mongo_service_status.stat.exists and not m_setup_php_profiling


# Now that PHP is installed, start apache
- name: ensure apache is running (and enable it at boot)
  service:
    name: httpd
    state: started
    enabled: yes
  when: docker_skip_tasks is not defined or not docker_skip_tasks



# Might need these for SELinux to be turned back on
# - name: Configure SELinux to start mysql on any port
#   seboolean: name=mysql_connect_any state=true persistent=yes
#   when: sestatus.rc != 0
# - name: Configure SELinux to allow httpd to connect to remote database
#   seboolean: name=httpd_can_network_connect_db state=true persistent=yes
#   when: sestatus.rc != 0
